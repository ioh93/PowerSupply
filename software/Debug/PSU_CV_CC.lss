
PSU_CV_CC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000048c  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002c7  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003d6  00000000  00000000  00000989  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000120  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000022d  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000150  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000088  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adcRead>:

// Read from ADCs pin adcx, returns measured value
uint16_t adcRead(uint8_t adcx)
{
    // Select ADC pin
    ADMUX &= 0xF0;
  80:	90 91 7c 00 	lds	r25, 0x007C
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	90 93 7c 00 	sts	0x007C, r25
    ADMUX |= adcx;
  8a:	90 91 7c 00 	lds	r25, 0x007C
  8e:	98 2b       	or	r25, r24
  90:	90 93 7c 00 	sts	0x007C, r25
    // Start conversion
    ADCSRA |= 1<<ADSC;
  94:	80 91 7a 00 	lds	r24, 0x007A
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 93 7a 00 	sts	0x007A, r24
    // Wait until conversion complete
    while ( (ADCSRA & (1<<ADSC)));
  9e:	80 91 7a 00 	lds	r24, 0x007A
  a2:	86 fd       	sbrc	r24, 6
  a4:	fc cf       	rjmp	.-8      	; 0x9e <adcRead+0x1e>

    //TODO:: check if "ADC" instead of merging 2 8bit registers ADCL and ADCH
    return ADC;
  a6:	80 91 78 00 	lds	r24, 0x0078
  aa:	90 91 79 00 	lds	r25, 0x0079
}
  ae:	08 95       	ret

000000b0 <i2cInit>:

// Initializes I2C bus
void i2cInit(void)
{
    // initialize TWI clock
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 b8 00 	sts	0x00B8, r24
    TWSR = 0;
  b6:	10 92 b9 00 	sts	0x00B9, r1
  ba:	08 95       	ret

000000bc <main>:
#include "uart.h"

int main(void)
{
	// TODO:: testing, to be removed
	i2cInit();
  bc:	0e 94 58 00 	call	0xb0	; 0xb0 <i2cInit>
	uartInit(BAUD);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	95 e2       	ldi	r25, 0x25	; 37
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <uartInit>
	adcRead(adc_pin_0);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <adcRead>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x12>

000000d0 <uartInit>:

// UART initialisation
void uartInit(uint16_t ubrr)
{
    // Set UART baudrate
    UBRR0H = (uint8_t)(ubrr >> 8);
  d0:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (uint8_t)ubrr;
  d4:	80 93 c4 00 	sts	0x00C4, r24
    // Enable receiver and transmitter
    UCSR0B = (1 << RXEN0) | ( 1<< TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24
    // Set frame format: 8data, 2stop bit
    UCSR0C = (1 << USBS0) | (3 << UCSZ00);
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	80 93 c2 00 	sts	0x00C2, r24
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
